    >>> from zope.publisher.browser import TestRequest

    >>> class Mock(object):
    ...     def __init__(self, **kwargs):
    ...         for k, v in kwargs.items(): setattr(self, k, v)

    >>> portal = Mock()
    >>> context = Mock(portal_url=Mock(getPortalObject=lambda: portal))

    >>> from collective.folderlogo.browser.template import FolderLogoView
    >>> view = FolderLogoView(context, TestRequest())
    >>> form = view.form_instance
    >>> form.buttons.get('update')
    <Button 'update' u'Update'>
    >>> form.enctype
    'multipart/form-data'
    >>> form.fields.items()
    [('logo_id', <Field 'logo_id'>)]
    >>> field = form.fields.get('logo_id')
    >>> dir(field.field)
    ['_Element__tagged_values', '_Field__missing_value_marker', '__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__implemented__', '__init__', '__module__', '__name__', '__ne__', '__new__', '__providedBy__', '__provides__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_type', '_validate', 'bind', 'constraint', 'context', 'default', 'description', 'fromUnicode', 'get', 'getDoc', 'getName', 'getTaggedValue', 'getTaggedValueTags', 'interface', 'max_length', 'min_length', 'missing_value', 'order', 'query', 'queryTaggedValue', 'readonly', 'required', 'set', 'setTaggedValue', 'title', 'validate']
    >>> field.field.max_length
    >>> field.field.min_length
    0
    >>> field.field.required
    True
    >>> field.field.title
    u'Logo ID'
    >>> field.field.description
    u''
    >>> form.formErrorsMessage
    u'There were some errors.'
    >>> form.handlers
    <Handlers [<Handler for <Button 'update' u'Update'>>]>
    >>> form.id
    'form'
    >>> form.ignoreReadonly
    False
    >>> form.ignoreContext
    True
    >>> form.ignoreRequest
    False
    >>> form.label
    u'Update Logo ID'
    >>> form.labelRequired
    u'<span class="required">*</span>&ndash; required'
    >>> form.method
    'post'
    >>> form.mode
    'input'
    >>> form.name
    'form'
    >>> form.prefix
    'form.'
    >>> form.refreshActions
    False
    >>> form.status
    ''
